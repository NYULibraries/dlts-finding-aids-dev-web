{"version":3,"sources":["webpack:///src/src/App.vue","webpack:///src/components/src/components/Navbar.vue","webpack:///src/components/src/components/Home.vue","webpack:///src/components/src/components/CreateNewFindingAid.vue","webpack:///src/components/src/components/Login.vue","webpack:///src/components/src/components/Preview.vue","webpack:///src/components/src/components/ManageInProcessFindingAids.vue","webpack:///src/components/src/components/ManagePublishedFindingAids.vue"],"names":[],"mappings":"AA+DA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,YAAA,CACA,iBAAA,CACA,aACA,CAEA,KACA,YACA,CAEA,OACA,eAAA,CACA,aACA,CAEA,gCACA,aACA,CAEA,aACA,WAAA,CACA,UACA,CCLA,2BACA,UACA,CAEA,qCACA,wBACA,CCeA,gCAEA,iBACA,CAEA,8BACA,cACA,CAQA,oEALA,4BAAA,CACA,0BAAA,CACA,yBAQA,CALA,oCAGA,2BAEA,CAEA,mCACA,4BAAA,CACA,2BAAA,CACA,yBACA,CAEA,8BACA,UACA,CAEA,8BACA,0BAAA,CACA,2BAAA,CACA,yBAAA,CACA,UAAA,CACA,cACA,CCyQA,yBACA,aACA,CAEA,8BACA,YACA,CAEA,mCACA,qBAAA,CACA,UACA,CAEA,6BACA,UACA,CAEA,yBACA,SACA,CAEA,sBACA,UACA,CC/PA,+BACA,aACA,CAEA,2BACA,SACA,CAUA,+FACA,cACA,CAEA,iCACA,aACA,CCpIA,oBACA,cACA,CC8iBA,gCACA,gBAAA,CACA,cAAA,CACA,eAAA,CACA,aACA,CAEA,+BACA,gBACA,CAEA,yBACA,gBAAA,CACA,aACA,CCjFA,gCACA,gBAAA,CACA,cAAA,CACA,eAAA,CACA,aACA,CAEA,+BACA,gBACA,CAEA,yBACA,gBAAA,CACA,aACA","file":"app.0d0de76d.css","sourcesContent":["<template>\n    <div id=\"app\">\n        <router-view id=\"router-view\" />\n\n        <b-modal\n            id=\"help-modal\"\n            size=\"lg\"\n            centered\n            ok-only\n            scrollable\n            :title=\"helpModal.title\"\n        >\n            <span v-html=\"helpModal.content\"></span>\n        </b-modal>\n    </div>\n</template>\n\n<script>\n\nimport { mapGetters, mapActions } from 'vuex';\n\nexport default {\n    name       : 'App',\n    components : {\n    },\n    data() {\n        return {\n            route : this.$route,\n        };\n    },\n    computed : {\n        ...mapGetters(\n            [\n                'helpModal',\n            ],\n        ),\n    },\n    watch : {\n    },\n    mounted() {\n        this._keyListener = function ( e ) {\n            if ( e.key === 'h' && ( e.ctrlKey ) ) {\n                e.preventDefault(); // present \"Save Page\" from getting triggered.\n\n                this.$bvModal.show( 'help-modal' );\n            }\n        };\n\n        document.addEventListener( 'keydown', this._keyListener.bind( this ) );\n    },\n    beforeDestroy() {\n        document.removeEventListener( 'keydown', this._keyListener );\n    },\n    methods : {\n        ...mapActions(\n            [\n            ],\n        ),\n    },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  height : 900px;\n  text-align: center;\n  color: #2c3e50;\n}\n\n#nav {\n  padding: 30px;\n}\n\n#nav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n#nav a.router-link-exact-active {\n  color: #42b983;\n}\n\n#router-view {\n    height : 100%;\n    width  : 100%;\n}\n</style>\n","<template>\n    <div>\n        <b-navbar\n            sticky\n            type=\"light\"\n            variant=\"light\"\n        >\n            <b-navbar-brand href=\"#/\">\n                FAM\n            </b-navbar-brand>\n\n            <b-collapse\n                id=\"nav-collapse\"\n                is-nav\n            >\n                <b-navbar-nav>\n                    <b-nav-item\n                        :to=\"{ name: 'home' }\"\n                        exact\n                    >\n                        Home\n                    </b-nav-item>\n                    <b-nav-item :to=\"{ name: 'create' }\">\n                        Create FA\n                    </b-nav-item>\n                    <b-nav-item :to=\"{ name: 'in-process' }\">\n                        In-process FAs\n                    </b-nav-item>\n                    <b-nav-item :to=\"{ name: 'published' }\">\n                        Published FAs\n                    </b-nav-item>\n                </b-navbar-nav>\n\n                <!-- Right aligned nav items -->\n                <b-navbar-nav class=\"ml-auto\">\n                    <b-nav-text right>\n                        {{ currentUser }}\n                    </b-nav-text>\n\n                    <b-nav-item\n                        right\n                        @click=\"logout\"\n                    >\n                        Logout\n                    </b-nav-item>\n                </b-navbar-nav>\n            </b-collapse>\n        </b-navbar>\n    </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n    computed : {\n        ...mapGetters(\n            [\n                'currentUser',\n            ],\n        ),\n    },\n    methods : {\n        async logout() {\n            if ( this.currentUser ) {\n                await this.$sleep( 500 );\n\n                this.setCurrentUser( '' );\n                this.setFetchInitialPublishedFindingAidsMetadata( true );\n                this.$router.push( 'login' );\n            }\n        },\n        ...mapActions(\n            [\n                'setCurrentUser',\n                'setFetchInitialPublishedFindingAidsMetadata',\n            ],\n        ),\n    },\n};\n</script>\n\n<style scoped>\n.nav-link {\n    color : black;\n}\n\n.router-link-active {\n    background-color : lightgrey;\n}\n</style>\n","<template>\n    <b-container\n        id=\"main-container\"\n        class=\"main-container h-100\"\n    >\n        <navbar />\n        <b-row\n            id=\"welcome-row\"\n            align-v=\"center\"\n        >\n            <b-col>\n                <h1>\n                    Welcome to the FAM\n                </h1>\n            </b-col>\n        </b-row>\n        <b-row\n            id=\"options-row\"\n        >\n            <b-col\n                id=\"create-option\"\n                class=\"option-column\"\n                cols=\"4\"\n            >\n                <router-link\n                    class=\"option-link\"\n                    :to=\"{ name : 'create' }\"\n                >\n                    Create a finding aid\n                </router-link>\n            </b-col>\n            <b-col\n                id=\"in-process-option\"\n                class=\"option-column\"\n                cols=\"4\"\n            >\n                <router-link\n                    class=\"option-link\"\n                    :to=\"{ name : 'in-process' }\"\n                >\n                    Manage in-process finding aids\n                </router-link>\n            </b-col>\n            <b-col\n                id=\"published-option\"\n                class=\"option-column\"\n                cols=\"4\"\n            >\n                <router-link\n                    class=\"option-link\"\n                    :to=\"{ name : 'published' }\"\n                >\n                    Manage published finding aids\n                </router-link>\n            </b-col>\n        </b-row>\n    </b-container>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nimport Navbar from './Navbar';\n\nexport default {\n    name       : 'Home',\n    components : {\n        Navbar,\n    },\n    props    : {},\n    computed : {\n        ...mapGetters(\n            [\n                'currentUser',\n            ],\n        ),\n    },\n    mounted() {\n        if ( ! this.currentUser ) {\n            this.$router.push( { name : 'login' } );\n\n            return;\n        }\n\n        this.setHelpModal(\n            {\n                content : '<p>Try navigating using the navbar and the links on the page.</p>' +\n                    '<p>Try logging out and navigating back to this home page without first logging back in.</p>',\n                title   : 'Home screen',\n            },\n        );\n    },\n    methods : {\n        ...mapActions(\n            [\n                'setHelpModal',\n            ],\n        ),\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.option-column {\n    /* Height of row = 900px * 18% */\n    line-height : 162px;\n}\n\n.option-link {\n    font-size : 24px;\n}\n\n#create-option {\n    border-bottom : solid black 1px;\n    border-left : solid black 1px;\n    border-top : solid black 1px;\n}\n\n#in-process-option {\n    border-bottom : solid black 1px;\n    border-left : solid black 1px;\n    border-right : solid black 1px;\n    border-top : solid black 1px;\n}\n\n#published-option {\n    border-bottom : solid black 1px;\n    border-right : solid black 1px;\n    border-top : solid black 1px;\n}\n\n#options-row {\n    height : 18%;\n}\n\n#welcome-row {\n    border-left : solid black 1px;\n    border-right : solid black 1px;\n    border-top : solid black 1px;\n    height     : 18%;\n    margin-top : 20%;\n}\n</style>\n","<template>\n    <div>\n        <b-container\n            id=\"main-container\"\n            class=\"main-container h-100\"\n        >\n            <navbar />\n\n            <h1 id=\"header\">\n                Upload EAD XML file\n            </h1>\n\n            <b-row\n                id=\"upload-row\"\n                class=\"row\"\n                align-h=\"center\"\n            >\n                <b-col\n                    id=\"upload-col\"\n                    cols=\"6\"\n                >\n                    <!-- Styled -->\n                    <b-form-file\n                        ref=\"upload-file-input\"\n                        v-model=\"file\"\n                        :state=\"formFileState\"\n                        accept=\".xml\"\n                        placeholder=\"Choose an EAD file or drop it here...\"\n                        drop-placeholder=\"Drop file here...\"\n                    />\n                </b-col>\n            </b-row>\n\n            <b-row\n                id=\"results-row\"\n                class=\"row\"\n                align-h=\"center\"\n            >\n                <b-col\n                    id=\"results-col\"\n                >\n                    <b-form-textarea\n                        id=\"results-textarea\"\n                        v-model=\"results\"\n                        placeholder=\"Waiting for upload of EAD file...\"\n                        rows=\"20\"\n                        readonly\n                        plaintext\n                    />\n                </b-col>\n            </b-row>\n\n            <b-row\n                id=\"buttons-row\"\n                class=\"row\"\n                align-h=\"center\"\n            >\n                <b-col\n                    id=\"buttons-col\"\n                    cols=\"10\"\n                >\n                    <b-button\n                        id=\"cancel-button\"\n                        class=\"button\"\n                        variant=\"dark\"\n                        :disabled=\"cancelDisabled\"\n                        @click=\"cancel\"\n                    >\n                        Cancel\n                    </b-button>\n                    <b-button\n                        id=\"submit-button\"\n                        class=\"button\"\n                        variant=\"success\"\n                        :disabled=\"submitDisabled\"\n                        @click=\"submit\"\n                    >\n                        Submit\n                    </b-button>\n                </b-col>\n            </b-row>\n        </b-container>\n    </div>\n</template>\n\n<script>\nimport moment from 'moment';\nimport { mapActions, mapGetters } from 'vuex';\n\nimport Navbar from './Navbar';\n\nlet parser;\n\nexport default {\n    name       : 'CreateNewFindingAid',\n    components : {\n        Navbar,\n    },\n    data() {\n        return {\n            file                : null,\n            cancelDisabled      : null,\n            inProcessFindingAid : null,\n            results             : null,\n            formFileState       : null,\n            submitDisabled      : true,\n        };\n    },\n    computed : {\n        recognizedRepositoryNames() {\n            return Object.keys( this.repositories ).map( repositoryCode => {\n                return this.repositories[ repositoryCode ].name;\n            } );\n        },\n        recognizedRepositoryNamesListHTML() {\n            return this.recognizedRepositoryNames.map( repositoryName => {\n                return `<li>${ repositoryName }</li>\\n`;\n            } ).join( '' );\n        },\n        ...mapGetters(\n            [\n                'currentUser',\n                'currentRepositoryNames',\n                'repositories',\n            ],\n        ),\n    },\n    watch : {\n        async file() {\n            if ( this.file ) {\n                this.cancelDisabled = true;\n\n                if ( ! this.file.name.endsWith( '.xml' ) ) {\n                    this.results = 'The uploaded EAD file must have a .xml extension.';\n                    this.formFileState = false;\n                    return;\n                }\n\n                this.formFileState = true;\n                this.results = `Uploading EAD file ${ this.file.name }...\\n`;\n                await this.$sleep( 5000 );\n                this.results += 'Upload complete.\\n';\n\n                const ead = await this.$readFileAsTextSync( this.file );\n\n                this.processEAD( ead );\n\n                // Need to do this so that users can re-upload same file in Chrome\n                this.$refs[ 'upload-file-input' ].reset();\n\n                this.cancelDisabled = false;\n            }\n        },\n    },\n    mounted() {\n        if ( ! this.currentUser ) {\n            this.$router.push( { name : 'login' } );\n\n            return;\n        }\n\n        parser = new DOMParser();\n\n        this.setHelpModal(\n            {\n                content : `This mockup will accept uploads of EAD files with this\n(obviously fake) structure:\n\n<br>\n<br>\n\n<code>\n&lt;ead&gt;<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;eadid&gt;abc_123_def456&lt;/eadid&gt;<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;title&gt;New finding aid&lt;/title&gt;<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;repository&gt;New York University Archives&lt;/repository&gt;<br />\n&lt;/ead&gt;\n</code>\n\n<br>\n<br>\n\nThe elements used in this fake schema are the bare minimum needed for the EAD file to be\n\"uploaded\" in this interactive mockup for inclusion in the <strong>In-process FAs</strong> table.\n\n<br>\n<br>\n\nThis mockup does some basic validation of these (mostly fake) elements to provide\na feel for the sort of verifications we can have the FAM perform before attempting\nto create a preview finding aid.\n\n<br>\n<br>\n\nSome things to try:\n\n<br>\n<br>\n\n<ul>\n    <li>Upload a file with valid content using a filename ending in .xml</li>\n    <li>Upload a file with valid content using a filename that does not end in .xml</li>\n    <li>Upload a file with that is missing one or more of the elements shown in the example above</li>\n    <li>Upload a file with one or more elements with empty values</li>\n    <li>\n        Upload a file with an &lt;eadid&gt; that does not conform to the\n        <a\n            href=\"https://jira.nyu.edu/jira/browse/FADESIGN-20?focusedCommentId=426301&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-426301\"\n            target=\"_blank\">\n            rules\n        </a>\n    </li>\n    <li>\n        Upload a file with a &lt;repository&gt; long name for a repository that\n        the current user is not authorized for in the FAM (note that user\n        weatherly@nyu.edu is authorized to manage all repositories)\n    </li>\n    <li>\n        Upload a file with a &lt;repository&gt; value that is not a recognized.\n        These are the currently recognized repository long names:\n        <ul>\n            ${ this.recognizedRepositoryNamesListHTML }\n        </ul>\n    </li>\n    <li>Click the Cancel button after an upload has completed, but before submitting using the Submit button</li>\n    <li>Upload a valid EAD file and submit it using the Submit button</li>\n</ul>\n`,\n                title   : 'Create New Finding Aid screen',\n            },\n        );\n    },\n    methods : {\n        cancel() {\n            this.file = null;\n            this.results = null;\n            this.formFileState = true;\n            this.submitDisabled = true;\n        },\n        getEADElementValue( eadDoc, elementName ) {\n            const element = eadDoc.getElementsByTagName( elementName )[ 0 ];\n\n            let elementValue;\n            if ( element ) {\n                elementValue = element.textContent.trim();\n\n                if ( ! elementValue ) {\n                    throw new Error( `Required element <${ elementName }> is empty.` );\n                }\n\n                return elementValue;\n            } else {\n                throw new Error( `Required element <${ elementName }> not found.` );\n            }\n        },\n        getRepositoryCodeForRepository( repositoryName ) {\n            var that = this,\n                repositoryCode;\n\n            Object.keys( this.repositories ).forEach( code => {\n                if ( that.repositories[ code ].name === repositoryName ) {\n                    repositoryCode = code;\n                }\n            } );\n\n            return repositoryCode;\n        },\n        processEAD( ead ) {\n            let abort = false;\n            const uploadedFindingAid = {};\n\n            const eadDoc = parser.parseFromString( ead, 'application/xml' );\n\n            const parserErrorCount = eadDoc.documentElement\n                .getElementsByTagName( 'parsererror' ).length;\n\n            if ( parserErrorCount > 0 ) {\n                this.results += 'The XML in this file is not valid.  Please check it ' +\n                                'using an XML validator.';\n                return;\n            }\n\n            const requiredEADElements = [ 'eadid', 'repository', 'title' ];\n            requiredEADElements.forEach( elementName => {\n                try {\n                    uploadedFindingAid[ elementName ] = this.getEADElementValue( eadDoc, elementName );\n                } catch( e ) {\n                    this.results += `${ e }\\n`;\n\n                    abort = true;\n                }\n            } );\n\n            if ( uploadedFindingAid.repository ) {\n                if ( this.recognizedRepositoryNames.includes( uploadedFindingAid.repository ) ) {\n                    if ( ! this.currentRepositoryNames.includes( uploadedFindingAid.repository ) ) {\n                        this.results += `User ${ this.currentUser } is not currently authorized` +\n                                        ` to create a finding aid for repository \"${ uploadedFindingAid.repository }\".\\n`;\n\n                        abort = true;\n                    }\n                } else {\n                    this.results += `Element <repository> contains unknown repository name \"${ uploadedFindingAid.repository }\".\nThe repository name must match a value from this list:\n\n${ this.recognizedRepositoryNames.join( '\\n' ) }\n\n`;\n\n                    abort = true;\n                }\n            }\n\n            const eadidErrors = this.validateEADID( uploadedFindingAid.eadid );\n            if ( eadidErrors.length > 0 ) {\n                this.results += `<eadid> value \"${ uploadedFindingAid.eadid }\" does ` +\n                    'not conform to the Finding Aids specification.\\n';\n\n                this.results += eadidErrors.join( '\\n' ) + '\\n';\n\n                abort = true;\n            }\n\n            if ( abort ) {\n                this.results += 'Please make the necessary corrections and re-upload the EAD file.';\n                this.formFileState = false;\n                this.submitDisabled = true;\n\n                return;\n            }\n\n            this.newInProcessFindingAid = {\n                datetime   : Math.round( ( new Date() ).getTime() / 1000 ),\n                id         : uploadedFindingAid.eadid,\n                repository : this.getRepositoryCodeForRepository( uploadedFindingAid.repository ),\n                title      : uploadedFindingAid.title,\n            };\n\n            this.results += 'EAD file has been validated.\\nReady to submit:\\n\\n' +\n                `EAD ID: ${ uploadedFindingAid.eadid }\\n` +\n                `TITLE: ${ uploadedFindingAid.title }\\n` +\n                `REPOSITORY: ${ uploadedFindingAid.repository }` +\n                '\\n\\n';\n\n            this.submitDisabled = false;\n        },\n        async submit() {\n            this.results += 'Creating in-process finding aid...\\n';\n\n            await this.$sleep( 5000 );\n\n            this.addInProcessFindingAid( this.newInProcessFindingAid );\n\n            const formattedDatetime =\n                moment( this.newInProcessFindingAid.datetime * 1000 ).format( 'M/D/YYYY h:mm a' );\n\n            this.results += 'New in-process finding aid created:\\n\\n' +\n                `ID: ${ this.newInProcessFindingAid.id }\\n` +\n                `TITLE: ${ this.newInProcessFindingAid.title }\\n` +\n                `REPOSITORY CODE: ${ this.newInProcessFindingAid.repository }\\n` +\n                `DATETIME: ${  formattedDatetime }\\n\\n`;\n\n            this.results += 'Proceed to In-process FAs to preview the new EAD file and finding aid.\\n';\n\n            this.submitDisabled = true;\n        },\n        validateEADID( eadid ) {\n            const errors = [];\n\n            const tokens = eadid.split( '_' );\n            if ( tokens.length < 2 || tokens.length > 8 ) {\n                errors.push( 'There must be between 2 to 8 character groups joined by underscores.' );\n            }\n\n            const allowedCharactersRegex = /[^a-z0-9]/g;\n            const disallowedCharactersFoundObject = {};\n            tokens.forEach( token => {\n                const matches = [ ...token.matchAll( allowedCharactersRegex ) ];\n\n                if ( matches.length > 0 ) {\n                    matches.forEach( match => {\n                        disallowedCharactersFoundObject[ match ] = true;\n                    } );\n                }\n            } );\n\n            const disallowedCharactersFound = Object.keys( disallowedCharactersFoundObject );\n            if ( disallowedCharactersFound.length > 0 ) {\n                errors.push( 'The following characters are not allowed in character groups: ' +\n                             disallowedCharactersFound.sort().join( ', ' ) );\n            }\n\n            return errors;\n        },\n        ...mapActions(\n            [\n                'addInProcessFindingAid',\n                'setHelpModal',\n            ],\n        ),\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#header {\n    margin-top : 3%;\n}\n\n#results-col {\n    height : 500px;\n}\n\n#results-textarea {\n    border : solid black 1px;\n    padding : 1%;\n}\n\n#upload-row {\n    padding : 2%;\n}\n\n.button {\n    margin : 1%;\n}\n\n.row {\n    padding : 1%;\n}\n</style>\n","<template>\n    <div>\n        <b-container\n            id=\"main-container\"\n            class=\"main-container h-100\"\n        >\n            <h1>Log in to the Finding Aids Manager</h1>\n\n            <b-row\n                id=\"feedback-row\"\n                align-h=\"center\"\n            >\n                <b-col cols=\"6\">\n                    <div id=\"feedback\">\n                        {{ feedback }}\n                    </div>\n\n                    <b-spinner v-if=\"showSpinner\" />\n                </b-col>\n            </b-row>\n\n            <b-form @submit.prevent=\"clickSignIn\">\n                <b-row\n                    id=\"username-row\"\n                    align-h=\"center\"\n                >\n                    <b-col cols=\"2\">\n                        <label for=\"username\">Username</label>\n                    </b-col>\n                    <b-col cols=\"4\">\n                        <b-form-input\n                            id=\"username\"\n                            v-model=\"username\"\n                            type=\"email\"\n                        />\n                    </b-col>\n                </b-row>\n\n                <b-row\n                    align-h=\"center\"\n                    class=\"my-1\"\n                >\n                    <b-col cols=\"2\">\n                        <label for=\"password\">Password</label>\n                    </b-col>\n                    <b-col cols=\"4\">\n                        <b-form-input\n                            id=\"password\"\n                            v-model=\"password\"\n                            type=\"password\"\n                        />\n                    </b-col>\n                </b-row>\n\n                <b-row\n                    align-h=\"center\"\n                    class=\"my-1\"\n                >\n                    <b-col cols=\"6\">\n                        <button\n                            id=\"sign-in-button\"\n                        >\n                            Sign In\n                        </button>\n                    </b-col>\n                </b-row>\n            </b-form>\n        </b-container>\n    </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n    name     : 'Login',\n    data() {\n        return {\n            feedback : '',\n            username : '',\n            password : '',\n\n            showSpinner : false,\n        };\n    },\n    computed : {\n        ...mapGetters(\n            [\n                'currentUser',\n                'repositories',\n                'users',\n            ],\n        ),\n    },\n    mounted() {\n        const userList = this.users.map( user => {\n            return `<li>${ user } - ${ this.getRepositoryCodesForUser( user ).join( ', ' ) }</li>`;\n        } ).join( '\\n' );\n        this.setHelpModal(\n            {\n                content : `\n<p>Each FAM user is granted permissions to a specific group of repositories.\nThis interactive mockup comes with the following users, all of whom have a password of \"password\":</p>\n<ul>\n${ userList }\n</ul>\n\n<p>Some things to try:</p>\n\n<ul>\n    <li>Log in one or more times with an incorrect username or password</li>\n    <li>Log in as different users</li>\n</ul>\n`,\n                title   : 'Login screen',\n            },\n        );\n    },\n    methods : {\n        async clickSignIn() {\n            this.feedback = '';\n            this.showSpinner = true;\n\n            await this.$sleep( 300 );\n\n            this.showSpinner = false;\n\n            this.setCurrentUser( this.username );\n            this.setCurrentRepositoryCodes( this.getRepositoryCodesForUser( this.username ) );\n            this.setCurrentRepositoryNames( this.getRepositoryNamesForUser( this.username ) );\n\n            if ( this.users.includes( this.username ) && this.password === 'password' ) {\n                this.$router.push( { name : 'home' } );\n            } else {\n                this.feedback = 'Invalid username and password combination';\n            }\n        },\n        getRepositoryCodesForUser( user ) {\n            const repositoryCodesForUser = [];\n\n            Object.keys( this.repositories ).forEach( repository => {\n                if ( this.repositories[ repository ].archivists.includes( user ) ) {\n                    repositoryCodesForUser.push( repository );\n                }\n            } );\n\n            return repositoryCodesForUser.sort();\n        },\n        getRepositoryNamesForUser( user ) {\n            const repositoryNamesForUser = [];\n\n            Object.keys( this.repositories ).forEach( repositoryCode => {\n                const repository = this.repositories[ repositoryCode ];\n                if ( repository.archivists.includes( user ) ) {\n                    repositoryNamesForUser.push( repository.name );\n                }\n            } );\n\n            return repositoryNamesForUser.sort();\n        },\n        ...mapActions(\n            [\n                'setCurrentRepositoryCodes',\n                'setCurrentRepositoryNames',\n                'setCurrentUser',\n                'setHelpModal',\n            ],\n        ),\n    },\n};\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#login-header {\n    margin-top: 5%;\n}\n\n#feedback {\n    color: red;\n}\n\n#feedback-row {\n    padding-top: 5%;\n}\n\n#main-container {\n    padding-top: 5%;\n}\n\n#username-row {\n    padding-top: 5%;\n}\n\n#sign-in-button {\n    margin-top: 5%;\n}\n</style>\n","<template>\n    <div>\n        <b-container\n            id=\"main-container\"\n            class=\"main-container h-100\"\n        >\n            <b-row\n                id=\"welcome-row\"\n                align-v=\"center\"\n            >\n                <b-col>\n                    <h1>\n                        Here you will see the preview for {{ previewType }} {{ $route.params.repositoryCode }}/{{ $route.params.id }}.\n                        It might be at a different URL than what is used here in this mockup.\n                    </h1>\n                </b-col>\n            </b-row>\n        </b-container>\n    </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n    name       : 'Preview',\n    props      : {},\n    computed : {\n        previewType() {\n            if ( this.$route.params.type === 'ead' ) {\n                return 'EAD file';\n            } else if ( this.$route.params.type === 'finding-aid' ) {\n                return 'finding aid';\n            } else {\n                return '[UNKNOWN TYPE]';\n            }\n        },\n        ...mapGetters(\n            [\n                'currentUser',\n            ],\n        ),\n    },\n    mounted() {\n        // Not doing currentUser check and routing to Login if no logged\n        // in user because Preview will always be opened in new tab.\n        this.setHelpModal(\n            {\n                content : 'TODO',\n                title   : 'Preview',\n            },\n        );\n    },\n    methods : {\n        ...mapActions(\n            [\n                'setHelpModal',\n            ],\n        ),\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh1 {\n    margin-top : 30%;\n}\n</style>\n","<template>\n    <div>\n        <b-container\n            id=\"main-container\"\n            class=\"main-container h-100\"\n        >\n            <navbar />\n\n            <h1 id=\"header\">\n                Manage in-process finding aids\n            </h1>\n\n            <b-row id=\"controls-row\">\n                <b-col\n                    class=\"my-1 text-left\"\n                    cols=\"6\"\n                >\n                    {{ totalRows.toLocaleString() }} finding aids found\n                </b-col>\n\n                <b-col\n                    class=\"my-1 text-right\"\n                    cols=\"2\"\n                >\n                    <b-form-group\n                        id=\"per-page-form-group\"\n                        label=\"Per page\"\n                        label-align=\"right\"\n                        label-cols=\"6\"\n                        label-size=\"sm\"\n                        label-for=\"per-page-select\"\n                        class=\"mb-0\"\n                    >\n                        <b-form-select\n                            v-model=\"perPage\"\n                            size=\"sm\"\n                            :options=\"pageOptions\"\n                        />\n                    </b-form-group>\n                </b-col>\n\n                <b-col\n                    class=\"my-1\"\n                >\n                    <b-pagination\n                        v-model=\"currentPage\"\n                        :total-rows=\"totalRows\"\n                        :per-page=\"perPage\"\n                        align=\"fill\"\n                        size=\"sm\"\n                        class=\"my-0\"\n                    />\n                </b-col>\n            </b-row>\n\n            <!-- Main table element -->\n            <b-table\n                ref=\"table\"\n                bordered\n                striped\n                show-empty\n                small\n                stacked=\"md\"\n                :items=\"items\"\n                :fields=\"fields\"\n                :current-page=\"currentPage\"\n                :per-page=\"perPage\"\n                :filter=\"filter\"\n                :filter-function=\"customFilter\"\n                :sort-by.sync=\"sortBy\"\n                :sort-direction=\"sortDirection\"\n                @filtered=\"onFiltered\"\n            >\n                <template v-slot:head(repository)=\"data\">\n                    <b-form-group\n                        :label=\"data.label\"\n                        label-cols=\"auto\"\n                        label-align-sm=\"left\"\n                        label-for=\"repository-filter\"\n                        class=\"mb-0\"\n                    >\n                        <b-form-select\n                            id=\"repository-filter\"\n                            v-model=\"filter.repository\"\n                            :options=\"repositoryFilterOptions\"\n                            size=\"sm\"\n                        />\n                    </b-form-group>\n                </template>\n\n                <template v-slot:head(id)=\"data\">\n                    <b-form-group\n                        :label=\"data.label\"\n                        label-cols=\"auto\"\n                        label-align-sm=\"left\"\n                        label-for=\"id-filter\"\n                        class=\"mb-0\"\n                    >\n                        <b-input-group size=\"sm\">\n                            <b-form-input\n                                id=\"id-filter\"\n                                v-model=\"filter.id\"\n                                debounce=\"500\"\n                                type=\"search\"\n                            />\n                        </b-input-group>\n                    </b-form-group>\n                </template>\n\n                <template v-slot:head(title)=\"data\">\n                    <b-form-group\n                        :label=\"data.label\"\n                        label-cols=\"auto\"\n                        label-align-sm=\"left\"\n                        label-for=\"title-filter\"\n                        class=\"mb-0\"\n                    >\n                        <b-input-group size=\"sm\">\n                            <b-form-input\n                                id=\"title-filter\"\n                                v-model=\"filter.title\"\n                                debounce=\"500\"\n                                type=\"search\"\n                            />\n                        </b-input-group>\n                    </b-form-group>\n                </template>\n\n                <template v-slot:cell(actions)=\"row\">\n                    <span\n                        class=\"h1\"\n                    >\n                        <b-icon\n                            v-if=\"row.detailsShowing\"\n                            icon=\"caret-down-fill\"\n                            @click=\"row.toggleDetails\"\n                        />\n                        <b-icon\n                            v-else\n                            icon=\"caret-left-fill\"\n                            @click=\"row.toggleDetails\"\n                        />\n                    </span>\n                </template>\n\n                <template v-slot:row-details=\"row\">\n                    <div>\n                        <b-button\n                            class=\"action-button\"\n                            :to=\"{ name : 'preview', params : { type : 'finding-aid', repositoryCode : row.item.repositoryCode, id : row.item.id } }\"\n                            target=\"_blank\"\n                        >\n                            View finding aid preview\n                        </b-button>\n\n                        <b-button\n                            class=\"action-button\"\n                            :to=\"{ name : 'preview', params : { type : 'ead', repositoryCode : row.item.repositoryCode, id : row.item.id } }\"\n                            target=\"_blank\"\n                        >\n                            View EAD file preview\n                        </b-button>\n\n                        <b-button\n                            class=\"action-button\"\n                            :data-id=\"row.item.id\"\n                            :data-repository-code=\"row.item.repositoryCode\"\n                            :data-title=\"row.item.title\"\n                            @click=\"clickPublishInProcessFindingAid\"\n                        >\n                            Publish finding aid\n                        </b-button>\n\n                        <b-button\n                            class=\"action-button\"\n                            :data-id=\"row.item.id\"\n                            :data-repository-code=\"row.item.repositoryCode\"\n                            variant=\"danger\"\n                            @click=\"clickDeleteInProcessFindingAid\"\n                        >\n                            Delete in-process finding aid\n                        </b-button>\n                    </div>\n                </template>\n            </b-table>\n        </b-container>\n\n        <b-modal\n            id=\"confirm-deletion-modal\"\n            header-text-variant=\"danger\"\n            size=\"lg\"\n            centered\n            title=\"Confirm deletion\"\n            ok-title=\"Delete\"\n            ok-variant=\"danger\"\n            @cancel=\"cancelDeleteInProcessFindingAid\"\n            @ok=\"confirmDeleteInProcessFindingAid\"\n        >\n            <p>\n                Are you sure you wish to delete preview finding aid {{ findingAidToDelete.repositoryCode }}/{{ findingAidToDelete.id }}?\n            </p>\n            <p>This will delete the following:</p>\n            <p></p>\n            <ul>\n                <li>\n                    Preview finding aid: {{ previewFindingAidToDeleteFullURL }}\n                </li>\n                <li>\n                    Preview EAD file: {{ previewEADFileToDeleteFullURL }}\n                </li>\n            </ul>\n        </b-modal>\n\n        <b-modal\n            id=\"deletion-in-progress-modal\"\n            centered\n            no-close-on-esc\n            no-close-on-backdrop\n            hide-footer\n            hide-header-close\n            title=\"Deleting in-process finding aid...\"\n        >\n            <b-row>\n                <b-col />\n                <b-col align=\"center\">\n                    <b-spinner />\n                </b-col>\n                <b-col />\n            </b-row>\n        </b-modal>\n\n        <b-modal\n            id=\"confirm-publish-modal\"\n            header-text-variant=\"danger\"\n            size=\"lg\"\n            centered\n            title=\"Confirm publication\"\n            ok-title=\"Publish\"\n            ok-variant=\"danger\"\n            @cancel=\"cancelPublishInProcessFindingAid\"\n            @ok=\"queuePublishInProcessFindingAid\"\n        >\n            <p>\n                Are you sure you wish to publish in-process finding aid\n                {{ findingAidToPublish.repositoryCode }}/{{ findingAidToPublish.id }}?\n            </p>\n            <p>\n                This will publish data to the following locations, overwriting whatever might already be there:\n            </p>\n            <p></p>\n            <ul>\n                <li>\n                    Finding aid:\n                    http://dlib.nyu.edu/findingaids/html/{{ findingAidToPublish.repositoryCode }}/{{ findingAidToPublish.id }}/\n                </li>\n                <li>\n                    Public EAD file:\n                    http://dlib.nyu.edu/findingaids/ead/{{ findingAidToPublish.repositoryCode }}/{{ findingAidToPublish.id }}.xml\n                </li>\n                <li>\n                    Search data: https://specialcollections.library.nyu.edu/search/\n                </li>\n                <li>\n                    Github EAD file:\n                    https://github.com/NYULibraries/findingaids_eads/blob/master/{{ findingAidToPublish.repositoryCode }}/{{ findingAidToPublish.id }}.xml\n                </li>\n            </ul>\n        </b-modal>\n\n        <b-modal\n            id=\"queuing-publish-modal\"\n            centered\n            no-close-on-esc\n            no-close-on-backdrop\n            hide-footer\n            hide-header-close\n            title=\"Queueing for publication...\"\n        >\n            <b-row>\n                <b-col />\n                <b-col align=\"center\">\n                    <b-spinner />\n                </b-col>\n                <b-col />\n            </b-row>\n        </b-modal>\n    </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nimport moment from 'moment';\n\nimport Navbar from './Navbar';\n\nexport default {\n    name       : 'ManageInProcessFindingAids',\n    components : {\n        Navbar,\n    },\n    data() {\n        return {\n            fields : [\n                {\n                    key           : 'repository',\n                    label         : 'Repository',\n                    sortable      : true,\n                    sortDirection : 'asc',\n                    class         : 'text-left',\n                },\n                {\n                    key           : 'id',\n                    label         : 'ID',\n                    sortable      : true,\n                    sortDirection : 'asc',\n                    class         : 'text-left',\n                },\n                {\n                    key           : 'title',\n                    label         : 'Title',\n                    sortable      : true,\n                    sortDirection : 'asc',\n                    class         : 'text-left text-wrap',\n                },\n                {\n                    key               : 'datetime',\n                    label             : 'Datetime',\n                    formatter         : ( datetime ) => {\n                        return moment( datetime * 1000 ).format( 'M/D/YYYY h:mm a' );\n                    },\n                    sortable          : true,\n                    sortDirection     : 'desc',\n                    filterByFormatted : true,\n                    class             : 'text-left text-nowrap',\n                },\n                {\n                    key   : 'actions',\n                    label : 'Actions',\n                    class : 'text-left text-nowrap',\n                },\n            ],\n            items         : null,\n            totalRows     : 0,\n            currentPage   : 1,\n            perPage       : 10,\n            pageOptions   : [ 10, 25, 50, 100 ],\n            sortBy        : 'repository',\n            sortDirection : 'asc',\n            filter        : {\n                id         : null,\n                repository : null,\n                title      : null,\n            },\n            filterOn           : [ 'title' ],\n            findingAidToDelete : {\n                id             : null,\n                repositoryCode : null,\n            },\n            findingAidToPublish : {\n                id             : null,\n                repositoryCode : null,\n                title          : null,\n            },\n        };\n    },\n    computed   : {\n        previewEADFileToDeleteFullURL() {\n            return this.previewToDeleteFullURL( 'ead' );\n        },\n        previewFindingAidToDeleteFullURL() {\n            return this.previewToDeleteFullURL( 'finding-aid' );\n        },\n        repositoryFilterOptions() {\n            const options = this.currentRepositoryCodes.map( repositoryCode => {\n                return {\n                    // Filter matches against repository, which has repositoryCode\n                    // in parentheses at the end.\n                    value : `(${ repositoryCode })`,\n                    text  : repositoryCode,\n                };\n            } );\n\n            options.unshift(\n                {\n                    value : null,\n                    text  : 'All',\n                },\n            );\n\n            return options;\n        },\n        ...mapGetters(\n            [\n                'currentRepositoryCodes',\n                'currentUser',\n                'inProcessFindingAids',\n                'repositories',\n            ],\n        ),\n    },\n    watch      : {},\n    mounted() {\n        if ( ! this.currentUser ) {\n            this.$router.push( { name : 'login' } );\n\n            return;\n        }\n\n        this.refreshTableItems();\n\n        this.totalRows = this.items.length;\n\n        this.setHelpModal(\n            {\n                content : `Some things to try:\n\n<br>\n<br>\n\n<ul>\n    <li>Filter by:\n        <ul>\n            <li>Repository</li>\n            <li>ID</li>\n            <li>Title</li>\n        </ul>\n    </li>\n    <li>Sort (ascending and descending) by:\n        <ul>\n            <li>Repository</li>\n            <li>ID</li>\n            <li>Title</li>\n            <li>Datetime</li>\n        </ul>\n    </li>\n    <li>Select different per page options from the dropdown</li>\n    <li>Navigate to different pages using page navigator buttons</li>\n    <li>Expand the Actions row for one or more finding aids rows</li>\n    <li>Expand the Actions row for a finding aid and click the \"View finding aid preview\" button</li>\n    <li>Expand the Actions row for a finding aid and click the \"View EAD file preview\" button</li>\n    <li>Expand the Actions row for a finding aid and click the \"Publish finding aid\" button</li>\n    <li>Expand the Actions row for a finding aid and click the \"Delete in-process finding aid\" button</li>\n</ul>\n`,\n                title   : 'Manage In-Process Finding Aids screen',\n            },\n        );\n    },\n    methods    : {\n        cancelDeleteInProcessFindingAid() {\n            this.clearDeleteInProcess();\n        },\n        cancelPublishInProcessFindingAid() {\n            this.clearPublishInProcess();\n        },\n        clearDeleteInProcess() {\n            this.findingAidToDelete.id = null;\n            this.findingAidToDelete.repositoryCode = null;\n        },\n        clearPublishInProcess() {\n            this.findingAidToPublish.id = null;\n            this.findingAidToPublish.repositoryCode = null;\n        },\n        clickDeleteInProcessFindingAid( event ) {\n            this.findingAidToDelete.id = event.currentTarget.dataset.id;\n            this.findingAidToDelete.repositoryCode = event.currentTarget.dataset.repositoryCode;\n\n            this.$bvModal.show( 'confirm-deletion-modal' );\n        },\n        clickPublishInProcessFindingAid( event ) {\n            this.findingAidToPublish.id = event.currentTarget.dataset.id;\n            this.findingAidToPublish.repositoryCode = event.currentTarget.dataset.repositoryCode;\n            this.findingAidToPublish.title = event.currentTarget.dataset.title;\n\n            this.$bvModal.show( 'confirm-publish-modal' );\n        },\n        previewToDeleteFullURL( type ) {\n            return window.location.href.replace( '/#/in-process', '' ) +\n                   '/' +\n                   this.$router.resolve(\n                       {\n                           name   : 'preview',\n                           params : {\n                               type           : type,\n                               repositoryCode : this.findingAidToDelete.repositoryCode,\n                               id             : this.findingAidToDelete.id,\n                           },\n                       },\n                   ).href;\n        },\n        refreshTableItems() {\n            this.items = this.getItems();\n        },\n        // Originally this was deleteInProcessFindingAid, which conflicts with\n        // Vuex action of the same name.\n        async confirmDeleteInProcessFindingAid() {\n            this.$bvModal.show( 'deletion-in-progress-modal' );\n\n            await this.$sleep( 1000 );\n\n            this.$bvModal.hide( 'deletion-in-progress-modal' );\n\n            this.deleteInProcessFindingAid(\n                {\n                    id         : this.findingAidToDelete.id,\n                    repository : this.findingAidToDelete.repositoryCode,\n                },\n            );\n\n            this.clearDeleteInProcess();\n\n            const message =\n                'The in-process finding aid has been deleted.';\n\n            const that = this;\n            this.$bvModal.msgBoxOk( message, {\n                centered : true,\n                title    : 'Deletion completed',\n            } ).then(\n                function () {\n                    that.refreshTableItems();\n\n                    that.$refs.table.refresh();\n                },\n            );\n        },\n        async queuePublishInProcessFindingAid() {\n            this.$bvModal.show( 'queuing-publish-modal' );\n\n            await this.$sleep( 1000 );\n\n            this.$bvModal.hide( 'queuing-publish-modal' );\n\n            this.publishInProcessFindingAid(\n                {\n                    datetime   : Math.round( ( new Date() ).getTime() / 1000 ),\n                    id         : this.findingAidToPublish.id,\n                    repository : this.findingAidToPublish.repositoryCode,\n                    title      : this.findingAidToPublish.title,\n                },\n            );\n\n            this.deleteInProcessFindingAid(\n                {\n                    id         : this.findingAidToPublish.id,\n                    repository : this.findingAidToPublish.repositoryCode,\n                },\n            );\n\n            this.clearPublishInProcess();\n\n            const message =\n                'The finding aid has been queued for publication.' +\n                ' The finding aid, public EAD file, and search data will' +\n                ' be published after the Github change has been made.' +\n                ' The full publication process should be completed in [X time].';\n\n            const that = this;\n            this.$bvModal.msgBoxOk( message, {\n                centered : true,\n                title    : 'Publication has been queued',\n            } ).then(\n                function () {\n                    that.refreshTableItems();\n\n                    that.$refs.table.refresh();\n                },\n            );\n        },\n        customFilter( row, filterProp ) {\n            for ( const filter in filterProp ) {\n                const filterValue = filterProp[ filter ];\n\n                if ( filterValue && ! row[ filter ].toLowerCase().includes( filterProp[ filter ] ) ) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        getItems() {\n            const items = [];\n\n            Object.keys( this.inProcessFindingAids ).forEach( repositoryCode => {\n                if ( this.currentRepositoryCodes.includes( repositoryCode ) ) {\n                    const findingAids = this.inProcessFindingAids[ repositoryCode ];\n\n                    Object.keys( findingAids ).forEach( id => {\n                        const findingAid = findingAids[ id ];\n\n                        items.push(\n                            {\n                                repository     : `${ this.repositories[ repositoryCode ].name } (${ repositoryCode })`,\n                                repositoryCode : repositoryCode,\n                                id             : id,\n                                title          : findingAid.title,\n                                datetime       : findingAid.datetime,\n                            },\n                        );\n                    } );\n                }\n            } );\n\n            return items;\n        },\n        onFiltered( filteredItems ) {\n            // Trigger pagination to update the number of buttons/pages due to filtering\n            this.totalRows = filteredItems.length;\n            this.currentPage = 1;\n        },\n        ...mapActions(\n            [\n                'setHelpModal',\n                'addInProcessFindingAid',\n                'deleteInProcessFindingAid',\n                'publishInProcessFindingAid',\n            ],\n        ),\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    .action-button {\n        margin-bottom : 2%;\n        margin-left   : 2%;\n        margin-right  : 2%;\n        margin-top    : 2%;\n    }\n\n    #controls-row {\n        margin-bottom : 1%;\n    }\n\n    #header {\n        margin-bottom : 3%;\n        margin-top : 3%;\n    }\n</style>\n","<template>\n    <div>\n        <b-container\n            id=\"main-container\"\n            class=\"main-container h-100\"\n        >\n            <navbar />\n\n            <h1 id=\"header\">\n                Manage published finding aids\n            </h1>\n\n            <b-row id=\"controls-row\">\n                <b-col\n                    class=\"my-1 text-left\"\n                    cols=\"6\"\n                >\n                    {{ totalRows.toLocaleString() }} finding aids found\n                </b-col>\n\n                <b-col\n                    class=\"my-1 text-right\"\n                    cols=\"2\"\n                >\n                    <b-form-group\n                        id=\"per-page-form-group\"\n                        label=\"Per page\"\n                        label-align=\"right\"\n                        label-cols=\"6\"\n                        label-size=\"sm\"\n                        label-for=\"per-page-select\"\n                        class=\"mb-0\"\n                    >\n                        <b-form-select\n                            v-model=\"perPage\"\n                            size=\"sm\"\n                            :options=\"pageOptions\"\n                        />\n                    </b-form-group>\n                </b-col>\n\n                <b-col\n                    class=\"my-1\"\n                >\n                    <b-pagination\n                        v-model=\"currentPage\"\n                        :total-rows=\"totalRows\"\n                        :per-page=\"perPage\"\n                        align=\"fill\"\n                        size=\"sm\"\n                        class=\"my-0\"\n                    />\n                </b-col>\n            </b-row>\n\n            <!-- Main table element -->\n            <b-table\n                ref=\"table\"\n                dark\n                striped\n                show-empty\n                small\n                stacked=\"md\"\n                :items=\"items\"\n                :fields=\"fields\"\n                :current-page=\"currentPage\"\n                :per-page=\"perPage\"\n                :filter=\"filter\"\n                :filter-function=\"customFilter\"\n                :sort-by.sync=\"sortBy\"\n                :sort-direction=\"sortDirection\"\n                @filtered=\"onFiltered\"\n            >\n                <template v-slot:head(repository)=\"data\">\n                    <b-form-group\n                        :label=\"data.label\"\n                        label-cols=\"auto\"\n                        label-align-sm=\"left\"\n                        label-for=\"repository-filter\"\n                        class=\"mb-0\"\n                    >\n                        <b-form-select\n                            id=\"repository-filter\"\n                            v-model=\"filter.repository\"\n                            :options=\"repositoryFilterOptions\"\n                            size=\"sm\"\n                        />\n                    </b-form-group>\n                </template>\n\n                <template v-slot:head(id)=\"data\">\n                    <b-form-group\n                        :label=\"data.label\"\n                        label-cols=\"auto\"\n                        label-align-sm=\"left\"\n                        label-for=\"id-filter\"\n                        class=\"mb-0\"\n                    >\n                        <b-input-group size=\"sm\">\n                            <b-form-input\n                                id=\"id-filter\"\n                                v-model=\"filter.id\"\n                                debounce=\"500\"\n                                type=\"search\"\n                            />\n                        </b-input-group>\n                    </b-form-group>\n                </template>\n\n                <template v-slot:head(title)=\"data\">\n                    <b-form-group\n                        :label=\"data.label\"\n                        label-cols=\"auto\"\n                        label-align-sm=\"left\"\n                        label-for=\"title-filter\"\n                        class=\"mb-0\"\n                    >\n                        <b-input-group size=\"sm\">\n                            <b-form-input\n                                id=\"title-filter\"\n                                v-model=\"filter.title\"\n                                debounce=\"500\"\n                                type=\"search\"\n                            />\n                        </b-input-group>\n                    </b-form-group>\n                </template>\n\n                <template v-slot:cell(actions)=\"row\">\n                    <span\n                        class=\"h1\"\n                    >\n                        <b-icon\n                            v-if=\"row.detailsShowing\"\n                            icon=\"caret-down-fill\"\n                            @click=\"row.toggleDetails\"\n                        />\n                        <b-icon\n                            v-else\n                            icon=\"caret-left-fill\"\n                            @click=\"row.toggleDetails\"\n                        />\n                    </span>\n                </template>\n\n                <template v-slot:row-details=\"row\">\n                    <div>\n                        <b-button\n                            class=\"action-button\"\n                            :href=\"`http://dlib.nyu.edu/findingaids/html/${ row.item.repositoryCode }/${ row.item.id }/`\"\n                            target=\"_blank\"\n                        >\n                            View finding aid\n                        </b-button>\n\n                        <b-button\n                            class=\"action-button\"\n                            :href=\"`http://dlib.nyu.edu/findingaids/ead/${ row.item.repositoryCode }/${ row.item.id }.xml`\"\n                            target=\"_blank\"\n                        >\n                            View EAD file\n                        </b-button>\n\n                        <b-button\n                            class=\"action-button\"\n                            :data-id=\"row.item.id\"\n                            :data-repository-code=\"row.item.repositoryCode\"\n                            variant=\"danger\"\n                            @click=\"clickUnpublishFindingAid\"\n                        >\n                            Unpublish finding aid\n                        </b-button>\n                    </div>\n                </template>\n            </b-table>\n        </b-container>\n\n        <b-modal\n            id=\"load-table-items-modal\"\n            size=\"lg\"\n            centered\n            title=\"Fetching the latest EAD files metadata from the Github repo\"\n            hide-footer\n        >\n            <b-row>\n                <b-col>\n                    <div id=\"load-table-items-modal-progress-message\">\n                        <div\n                            v-for=\"loadingRepositoryCode in loadingRepositoryCodes\"\n                            :key=\"loadingRepositoryCode\"\n                        >\n                            Fetching Github EAD files snapshot for {{ loadingRepositoryCode }} repository <b-spinner />\n                        </div>\n                        <br>\n                        <ul>\n                            <li\n                                v-for=\"loadedRepositoryCode in loadedRepositoryCodes\"\n                                :key=\"loadedRepositoryCode\"\n                            >\n                                {{ loadedRepositoryCode }}: {{ getNumFindingAidsForRepositoryCode( loadedRepositoryCode ) }} EAD files\n                            </li>\n                        </ul>\n                    </div>\n                </b-col>\n            </b-row>\n        </b-modal>\n\n        <b-modal\n            id=\"confirm-unpublish-modal\"\n            header-text-variant=\"danger\"\n            size=\"lg\"\n            centered\n            title=\"Confirm deletion\"\n            ok-title=\"Delete\"\n            ok-variant=\"danger\"\n            @cancel=\"cancelUnpublishFindingAid\"\n            @ok=\"queueUnpublishFindingAid\"\n        >\n            <p>Are you sure you wish to unpublish {{ findingAidToUnpublish.repositoryCode }}/{{ findingAidToUnpublish.id }}?</p>\n            <p>This will delete the following:</p>\n            <p></p>\n            <ul>\n                <li>\n                    Finding aid: http://dlib.nyu.edu/findingaids/html/{{ findingAidToUnpublish.repositoryCode }}/{{ findingAidToUnpublish.id }}/\n                </li>\n                <li>\n                    Public EAD file: http://dlib.nyu.edu/findingaids/ead/{{ findingAidToUnpublish.repositoryCode }}/{{ findingAidToUnpublish.id }}.xml\n                </li>\n                <li>\n                    Search data: https://specialcollections.library.nyu.edu/search/\n                </li>\n                <li>\n                    Github EAD file:\n                    https://github.com/NYULibraries/findingaids_eads/blob/master/{{ findingAidToUnpublish.repositoryCode }}/{{ findingAidToUnpublish.id }}.xml\n                </li>\n            </ul>\n        </b-modal>\n\n        <b-modal\n            id=\"queuing-unpublish-modal\"\n            centered\n            no-close-on-esc\n            no-close-on-backdrop\n            hide-footer\n            hide-header-close\n            title=\"Queueing for deletion...\"\n        >\n            <b-row>\n                <b-col />\n                <b-col align=\"center\">\n                    <b-spinner />\n                </b-col>\n                <b-col />\n            </b-row>\n        </b-modal>\n    </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nimport moment from 'moment';\n\nimport Navbar from './Navbar';\n\nexport default {\n    name       : 'ManagePublishedFindingAids',\n    components : {\n        Navbar,\n    },\n    data() {\n        return {\n            currentPage            : 1,\n            fields                 : [\n                {\n                    key           : 'repository',\n                    label         : 'Repository',\n                    sortable      : true,\n                    sortDirection : 'asc',\n                    class         : 'text-left',\n                },\n                {\n                    key           : 'id',\n                    label         : 'ID',\n                    sortable      : true,\n                    sortDirection : 'asc',\n                    class         : 'text-left',\n                },\n                {\n                    key           : 'title',\n                    label         : 'Title',\n                    sortable      : true,\n                    sortDirection : 'asc',\n                    class         : 'text-left text-wrap',\n                },\n                {\n                    key               : 'datetime',\n                    label             : 'Datetime',\n                    formatter         : ( datetime ) => {\n                        return moment( datetime * 1000 ).format( 'M/D/YYYY h:mm a' );\n                    },\n                    sortable          : true,\n                    sortDirection     : 'desc',\n                    filterByFormatted : true,\n                    class             : 'text-left text-nowrap',\n                },\n                {\n                    key   : 'actions',\n                    label : 'Actions',\n                    class : 'text-left text-nowrap',\n                },\n            ],\n            filter                 : {\n                id         : null,\n                repository : null,\n                title      : null,\n            },\n            filterOn               : [ 'title' ],\n            findingAidToUnpublish  : {\n                id             : null,\n                repositoryCode : null,\n            },\n            items                  : null,\n            loadedRepositoryCodes  : [],\n            loadingRepositoryCodes : [],\n            pageOptions            : [ 10, 25, 50, 100 ],\n            perPage                : 10,\n            sortBy                 : 'repository',\n            sortDirection          : 'asc',\n            totalRows              : 0,\n        };\n    },\n    computed   : {\n        repositoryFilterOptions() {\n            const options = this.currentRepositoryCodes.map( repositoryCode => {\n                return {\n                    // Filter matches against repository, which has repositoryCode\n                    // in parentheses at the end.\n                    value : `(${ repositoryCode })`,\n                    text  : repositoryCode,\n                };\n            } );\n\n            options.unshift(\n                {\n                    value : null,\n                    text  : 'All',\n                },\n            );\n\n            return options;\n        },\n        ...mapGetters(\n            [\n                'currentRepositoryCodes',\n                'currentUser',\n                'fetchInitialPublishedFindingAidsMetadata',\n                'publishedFindingAids',\n                'repositories',\n            ],\n        ),\n    },\n    watch      : {},\n    mounted() {\n        if ( ! this.currentUser ) {\n            this.$router.push( { name : 'login' } );\n\n            return;\n        }\n\n        if ( this.fetchInitialPublishedFindingAidsMetadata ) {\n            this.refreshTableItemsFromServer();\n\n            this.setFetchInitialPublishedFindingAidsMetadata( false );\n        } else {\n            this.refreshTableItemsFromStore();\n        }\n\n        this.totalRows = this.items.length;\n\n        this.setHelpModal(\n            {\n                content : `\n<p>\nThe first time the user navigates to <strong>Published FAs</strong>, the FAM will\nfetch the latest files metadata snapshots from the Github repo in order to populate\nthe finding aids table.  This is done on the initial visit to this page only.\nSubsequently navigating to another screen and then returning to this one will not\ntrigger a refresh of the data in the table.\n</p>\n\nSome things to try:\n\n<br>\n<br>\n\n<ul>\n    <li>Filter by:\n        <ul>\n            <li>Repository</li>\n            <li>ID</li>\n            <li>Title</li>\n        </ul>\n    </li>\n    <li>Sort (ascending and descending) by:\n        <ul>\n            <li>Repository</li>\n            <li>ID</li>\n            <li>Title</li>\n            <li>Datetime</li>\n        </ul>\n    </li>\n    <li>Select different per page options from the dropdown</li>\n    <li>Navigate to different pages using page navigator buttons</li>\n    <li>Expand the Actions row for one or more finding aids rows</li>\n    <li>Expand the Actions row for a finding aid and click the \"View finding aid\" button</li>\n    <li>Expand the Actions row for a finding aid and click the \"View EAD file\" button</li>\n    <li>Expand the Actions row for a finding aid and click the \"Unpublish finding aid\" button</li>\n</ul>\n`,\n                title   : 'Manage Published Finding Aids screen',\n            },\n        );\n    },\n    methods    : {\n        cancelUnpublishFindingAid() {\n            this.clearUnpublish();\n        },\n        clearUnpublish() {\n            this.findingAidToUnpublish.id = null;\n            this.findingAidToUnpublish.repositoryCode = null;\n        },\n        clickUnpublishFindingAid( event ) {\n            this.findingAidToUnpublish.id = event.currentTarget.dataset.id;\n            this.findingAidToUnpublish.repositoryCode = event.currentTarget.dataset.repositoryCode;\n\n            this.$bvModal.show( 'confirm-unpublish-modal' );\n        },\n        customFilter( row, filterProp ) {\n            for ( const filter in filterProp ) {\n                const filterValue = filterProp[ filter ];\n\n                if ( filterValue && ! row[ filter ].toLowerCase().includes( filterProp[ filter ] ) ) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        getItems() {\n            const items = [];\n\n            Object.keys( this.publishedFindingAids ).forEach( repositoryCode => {\n                if ( this.currentRepositoryCodes.includes( repositoryCode ) ) {\n                    const findingAids = this.publishedFindingAids[ repositoryCode ];\n\n                    Object.keys( findingAids ).forEach( id => {\n                        const findingAid = findingAids[ id ];\n\n                        items.push(\n                            {\n                                repository     : `${ this.repositories[ repositoryCode ].name } (${ repositoryCode })`,\n                                repositoryCode : repositoryCode,\n                                id             : id,\n                                title          : findingAid.title,\n                                datetime       : findingAid.datetime,\n                            },\n                        );\n                    } );\n                }\n            } );\n\n            return items;\n        },\n        getNumFindingAidsForRepositoryCode( repositoryCode ) {\n            if ( this.publishedFindingAids[ repositoryCode ] ) {\n                return Object.keys( this.publishedFindingAids[ repositoryCode ] )\n                    .length.toLocaleString();\n            } else {\n                return 0;\n            }\n        },\n        onFiltered( filteredItems ) {\n            // Trigger pagination to update the number of buttons/pages due to filtering\n            this.totalRows = filteredItems.length;\n            this.currentPage = 1;\n        },\n        async queueUnpublishFindingAid() {\n            this.$bvModal.show( 'queuing-unpublish-modal' );\n\n            await this.$sleep( 1000 );\n\n            this.$bvModal.hide( 'queuing-unpublish-modal' );\n\n            this.unpublishFindingAid(\n                {\n                    id         : this.findingAidToUnpublish.id,\n                    repository : this.findingAidToUnpublish.repositoryCode,\n                },\n            );\n\n            this.clearUnpublish();\n\n            const message =\n                'The Github EAD file has been queued for deletion.' +\n                ' The finding aid, public EAD file, and search data will' +\n                ' be deleted after the Github change has been made.' +\n                ' The full unpublish process should be completed in [X time].';\n\n            const that = this;\n            this.$bvModal.msgBoxOk( message, {\n                centered : true,\n                title    : 'Deletion has been queued',\n            } ).then(\n                function () {\n                    that.refreshTableItemsFromStore();\n\n                    that.$refs.table.refresh();\n                },\n            );\n        },\n        refreshTableItemsFromStore() {\n            this.items = this.getItems();\n        },\n        async refreshTableItemsFromServer() {\n            this.$bvModal.show( 'load-table-items-modal' );\n\n            const numCurrentRepositoryCodes = this.currentRepositoryCodes.length;\n            for ( let i = 0; i < numCurrentRepositoryCodes; i++ ) {\n                const repositoryCode = this.currentRepositoryCodes[ i ];\n\n                this.loadingRepositoryCodes.push( repositoryCode );\n\n                await this.$sleep( this.repositories[ repositoryCode ].loadTime );\n\n                this.loadingRepositoryCodes.splice(\n                    this.loadingRepositoryCodes.indexOf( repositoryCode ),\n                    1,\n                );\n\n                this.loadedRepositoryCodes.push( repositoryCode );\n            }\n\n            this.items = this.getItems();\n        },\n        ...mapActions(\n            [\n                'setHelpModal',\n                'setFetchInitialPublishedFindingAidsMetadata',\n                'unpublishFindingAid',\n            ],\n        ),\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    .action-button {\n        margin-bottom : 2%;\n        margin-left   : 2%;\n        margin-right  : 2%;\n        margin-top    : 2%;\n    }\n\n    #controls-row {\n        margin-bottom : 1%;\n    }\n\n    #header {\n        margin-bottom : 3%;\n        margin-top : 3%;\n    }\n</style>\n"]}